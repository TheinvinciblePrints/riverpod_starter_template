// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_riverpod_starter_template/test/features/authentication/data/auth_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:flutter_riverpod_starter_template/src/features/authentication/authentication.dart'
    as _i6;
import 'package:flutter_riverpod_starter_template/src/network/api_client.dart'
    as _i8;
import 'package:flutter_riverpod_starter_template/src/network/api_result_freezed.dart'
    as _i10;
import 'package:flutter_riverpod_starter_template/src/network/error_handler.dart'
    as _i9;
import 'package:flutter_riverpod_starter_template/src/network/network_exception.dart'
    as _i12;
import 'package:flutter_riverpod_starter_template/src/network/network_failures.dart'
    as _i3;
import 'package:flutter_riverpod_starter_template/src/storage/interface/i_preference_storage.dart'
    as _i5;
import 'package:flutter_riverpod_starter_template/src/storage/interface/i_secure_storage.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkFailure_1 extends _i1.SmartFake
    implements _i3.NetworkFailure {
  _FakeNetworkFailure_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_2<T1> extends _i1.SmartFake implements _i4.Future<T1> {
  _FakeFuture_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IPreferenceStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPreferenceStorage extends _i1.Mock
    implements _i5.IPreferenceStorage {
  MockIPreferenceStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> completeOnboarding() =>
      (super.noSuchMethod(
            Invocation.method(#completeOnboarding, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool hasCompletedOnboarding() =>
      (super.noSuchMethod(
            Invocation.method(#hasCompletedOnboarding, []),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<void> setThemeMode(String? mode) =>
      (super.noSuchMethod(
            Invocation.method(#setThemeMode, [mode]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveUser(_i6.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i6.User?> getUser() =>
      (super.noSuchMethod(
            Invocation.method(#getUser, []),
            returnValue: _i4.Future<_i6.User?>.value(),
          )
          as _i4.Future<_i6.User?>);

  @override
  _i4.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ISecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockISecureStorage extends _i1.Mock implements _i7.ISecureStorage {
  MockISecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveAccessToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#saveAccessToken, [token]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAccessToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> clearAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearAccessToken, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveRefreshToken(String? refreshToken) =>
      (super.noSuchMethod(
            Invocation.method(#saveRefreshToken, [refreshToken]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#getRefreshToken, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> clearRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#clearRefreshToken, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i8.ApiClient {
  MockApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response<dynamic>> get(
    String? uri, {
    String? fullUrl,
    Map<String, dynamic>? headers,
    Map<String, dynamic>? queryParameters,
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? requireToken = true,
    int? timeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [uri],
              {
                #fullUrl: fullUrl,
                #headers: headers,
                #queryParameters: queryParameters,
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #requireToken: requireToken,
                #timeout: timeout,
              },
            ),
            returnValue: _i4.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [uri],
                  {
                    #fullUrl: fullUrl,
                    #headers: headers,
                    #queryParameters: queryParameters,
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #requireToken: requireToken,
                    #timeout: timeout,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response<dynamic>>);

  @override
  _i4.Future<_i2.Response<dynamic>> post(
    String? uri, {
    required dynamic body,
    String? fullUrl,
    Map<String, dynamic>? headers,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? requireToken = true,
    int? timeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [uri],
              {
                #body: body,
                #fullUrl: fullUrl,
                #headers: headers,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #requireToken: requireToken,
                #timeout: timeout,
              },
            ),
            returnValue: _i4.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [uri],
                  {
                    #body: body,
                    #fullUrl: fullUrl,
                    #headers: headers,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #requireToken: requireToken,
                    #timeout: timeout,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response<dynamic>>);

  @override
  _i4.Future<_i2.Response<dynamic>> put(
    String? uri, {
    required dynamic body,
    String? fullUrl,
    Map<String, dynamic>? headers,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? requireToken = true,
    int? timeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [uri],
              {
                #body: body,
                #fullUrl: fullUrl,
                #headers: headers,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #requireToken: requireToken,
                #timeout: timeout,
              },
            ),
            returnValue: _i4.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #put,
                  [uri],
                  {
                    #body: body,
                    #fullUrl: fullUrl,
                    #headers: headers,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #requireToken: requireToken,
                    #timeout: timeout,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response<dynamic>>);

  @override
  _i4.Future<_i2.Response<dynamic>> delete(
    String? uri, {
    required dynamic body,
    String? fullUrl,
    Map<String, dynamic>? headers,
    _i2.CancelToken? cancelToken,
    bool? requireToken = true,
    int? timeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [uri],
              {
                #body: body,
                #fullUrl: fullUrl,
                #headers: headers,
                #cancelToken: cancelToken,
                #requireToken: requireToken,
                #timeout: timeout,
              },
            ),
            returnValue: _i4.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #delete,
                  [uri],
                  {
                    #body: body,
                    #fullUrl: fullUrl,
                    #headers: headers,
                    #cancelToken: cancelToken,
                    #requireToken: requireToken,
                    #timeout: timeout,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response<dynamic>>);

  @override
  _i4.Future<_i2.Response<dynamic>> download(
    String? uri,
    String? savePath, {
    String? fullUrl,
    Map<String, dynamic>? headers,
    String? method,
    Map<String, dynamic>? queryParameters,
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? requireToken = true,
    int? timeout,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #download,
              [uri, savePath],
              {
                #fullUrl: fullUrl,
                #headers: headers,
                #method: method,
                #queryParameters: queryParameters,
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #requireToken: requireToken,
                #timeout: timeout,
              },
            ),
            returnValue: _i4.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #download,
                  [uri, savePath],
                  {
                    #fullUrl: fullUrl,
                    #headers: headers,
                    #method: method,
                    #queryParameters: queryParameters,
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #requireToken: requireToken,
                    #timeout: timeout,
                  },
                ),
              ),
            ),
          )
          as _i4.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [ErrorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorHandler extends _i1.Mock implements _i9.ErrorHandler {
  MockErrorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i10.ApiResult<T>> execute<T>(_i4.Future<T> Function()? apiCall) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [apiCall]),
            returnValue: _i4.Future<_i10.ApiResult<T>>.value(
              _i11.dummyValue<_i10.ApiResult<T>>(
                this,
                Invocation.method(#execute, [apiCall]),
              ),
            ),
          )
          as _i4.Future<_i10.ApiResult<T>>);

  @override
  _i4.Future<_i10.ApiResult<T>> executeWithApiResult<T>(
    _i4.Future<_i10.ApiResult<T>> Function()? apiCall,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#executeWithApiResult, [apiCall]),
            returnValue: _i4.Future<_i10.ApiResult<T>>.value(
              _i11.dummyValue<_i10.ApiResult<T>>(
                this,
                Invocation.method(#executeWithApiResult, [apiCall]),
              ),
            ),
          )
          as _i4.Future<_i10.ApiResult<T>>);

  @override
  _i10.ApiResult<T> error<T>({required String? message, int? statusCode}) =>
      (super.noSuchMethod(
            Invocation.method(#error, [], {
              #message: message,
              #statusCode: statusCode,
            }),
            returnValue: _i11.dummyValue<_i10.ApiResult<T>>(
              this,
              Invocation.method(#error, [], {
                #message: message,
                #statusCode: statusCode,
              }),
            ),
          )
          as _i10.ApiResult<T>);

  @override
  bool isUnauthorized(_i3.NetworkFailure? failure) =>
      (super.noSuchMethod(
            Invocation.method(#isUnauthorized, [failure]),
            returnValue: false,
          )
          as bool);

  @override
  bool isNetworkError(_i3.NetworkFailure? failure) =>
      (super.noSuchMethod(
            Invocation.method(#isNetworkError, [failure]),
            returnValue: false,
          )
          as bool);

  @override
  T? safeParse<T>(
    _i2.Response<dynamic>? response,
    T Function(Map<String, dynamic>)? fromJson,
  ) =>
      (super.noSuchMethod(Invocation.method(#safeParse, [response, fromJson]))
          as T?);

  @override
  String createErrorMessage(_i3.NetworkFailure? failure) =>
      (super.noSuchMethod(
            Invocation.method(#createErrorMessage, [failure]),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.method(#createErrorMessage, [failure]),
            ),
          )
          as String);

  @override
  _i3.NetworkFailure mapNetworkExceptionToNetworkFailure(
    _i12.NetworkExceptions? exception, {
    int? statusCode,
    String? errorMessage,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #mapNetworkExceptionToNetworkFailure,
              [exception],
              {#statusCode: statusCode, #errorMessage: errorMessage},
            ),
            returnValue: _FakeNetworkFailure_1(
              this,
              Invocation.method(
                #mapNetworkExceptionToNetworkFailure,
                [exception],
                {#statusCode: statusCode, #errorMessage: errorMessage},
              ),
            ),
          )
          as _i3.NetworkFailure);

  @override
  _i3.NetworkFailure handleDioError(
    _i2.DioException? dioError,
    StackTrace? stackTrace,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#handleDioError, [dioError, stackTrace]),
            returnValue: _FakeNetworkFailure_1(
              this,
              Invocation.method(#handleDioError, [dioError, stackTrace]),
            ),
          )
          as _i3.NetworkFailure);

  @override
  _i3.NetworkFailure unHandledError(dynamic error, StackTrace? stackTrace) =>
      (super.noSuchMethod(
            Invocation.method(#unHandledError, [error, stackTrace]),
            returnValue: _FakeNetworkFailure_1(
              this,
              Invocation.method(#unHandledError, [error, stackTrace]),
            ),
          )
          as _i3.NetworkFailure);

  @override
  _i3.NetworkFailure handleException(
    dynamic exception,
    StackTrace? stackTrace,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#handleException, [exception, stackTrace]),
            returnValue: _FakeNetworkFailure_1(
              this,
              Invocation.method(#handleException, [exception, stackTrace]),
            ),
          )
          as _i3.NetworkFailure);

  @override
  _i4.Future<T> safeApiCall<T>(_i4.Future<T> Function()? apiCall) =>
      (super.noSuchMethod(
            Invocation.method(#safeApiCall, [apiCall]),
            returnValue:
                _i11.ifNotNull(
                  _i11.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#safeApiCall, [apiCall]),
                  ),
                  (T v) => _i4.Future<T>.value(v),
                ) ??
                _FakeFuture_2<T>(
                  this,
                  Invocation.method(#safeApiCall, [apiCall]),
                ),
          )
          as _i4.Future<T>);
}
